#include <avr/pgmspace.h>

#include "state_screensaver.h"

#include "receiver.h"
#include "channels.h"
#include "buttons.h"
#include "state.h"
#include "ui.h"


static const unsigned char PROGMEM logo[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF8, 0x00, 0x00,
    0x0F, 0xFE, 0x03, 0xFF, 0x00, 0x07, 0xFC, 0x03, 0xFF, 0x80, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00,
    0x0F, 0xFF, 0x83, 0xFF, 0xC0, 0x1F, 0xFF, 0x03, 0xFF, 0xE0, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xFF, 0xC3, 0xFF, 0xF0, 0x3F, 0xFF, 0x83, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xFF, 0xE3, 0xFF, 0xF0, 0x7F, 0xFF, 0xC3, 0xFF, 0xF8, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xFF, 0xE3, 0xFF, 0xF8, 0x7F, 0xFF, 0xC3, 0xFF, 0xF8, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xE7, 0xF3, 0xF3, 0xF8, 0xFF, 0xFF, 0xE3, 0xF3, 0xF8, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xC7, 0xF3, 0xF1, 0xF8, 0xFE, 0x0F, 0xE3, 0xF1, 0xFC, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xC3, 0xF3, 0xF0, 0xF9, 0xFC, 0x07, 0xF3, 0xF1, 0xFC, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00,
    0x0F, 0xC7, 0xF3, 0xF1, 0xF9, 0xF8, 0x03, 0xF3, 0xF1, 0xFC, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00,
    0x0F, 0xC7, 0xF3, 0xF1, 0xF9, 0xF8, 0x03, 0xF3, 0xF1, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0xFF, 0xE3, 0xFF, 0xF9, 0xF8, 0x03, 0xF3, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0xFF, 0xE3, 0xFF, 0xF9, 0xF8, 0x03, 0xF3, 0xFF, 0xF8, 0x00, 0x01, 0xFF, 0xF8, 0x00, 0x00,
    0x0F, 0xFF, 0xC3, 0xFF, 0xF1, 0xFC, 0x07, 0xF3, 0xFF, 0xF0, 0x0C, 0x01, 0xFF, 0xFC, 0x03, 0x80,
    0x0F, 0xFF, 0x83, 0xFF, 0xE0, 0xFE, 0x0F, 0xF3, 0xFF, 0xE0, 0x7F, 0xC3, 0xFF, 0xFC, 0x3F, 0xE0,
    0x0F, 0xFE, 0x03, 0xFF, 0xE0, 0xFF, 0x1F, 0xE3, 0xFF, 0x80, 0x7F, 0xE3, 0xFF, 0xFE, 0x7F, 0xF0,
    0x0F, 0xE0, 0x03, 0xFF, 0xF0, 0xFF, 0xFF, 0xE3, 0xF8, 0x00, 0x7F, 0xE7, 0xF0, 0xFE, 0x7F, 0xF0,
    0x0F, 0xC0, 0x03, 0xF7, 0xF0, 0x7F, 0xFF, 0xC3, 0xF0, 0x00, 0x7F, 0xEF, 0xE0, 0x3F, 0x3F, 0xF0,
    0x0F, 0xC0, 0x03, 0xF3, 0xF8, 0x3F, 0xFF, 0x83, 0xF0, 0x00, 0x7F, 0xCF, 0xC0, 0x1F, 0x3F, 0xF0,
    0x0F, 0xC0, 0x03, 0xF3, 0xF8, 0x1F, 0xFF, 0x03, 0xF0, 0x00, 0x7F, 0x9F, 0x80, 0x1F, 0x9F, 0xF0,
    0x0F, 0xC0, 0x03, 0xF1, 0xFC, 0x0F, 0xFE, 0x03, 0xF0, 0x00, 0x7F, 0x9F, 0x00, 0x0F, 0x9F, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x7F, 0x3F, 0x00, 0x0F, 0xCF, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F, 0x00, 0x0F, 0xCF, 0xF0,
    0x00, 0x07, 0xC0, 0xFC, 0x7C, 0x1E, 0x0F, 0xFF, 0x07, 0xF0, 0x7F, 0x3F, 0x00, 0x0F, 0xCF, 0xF0,
    0x00, 0x07, 0xE0, 0xFC, 0x7E, 0x1F, 0x9F, 0xFF, 0x1F, 0xF0, 0x7F, 0x9F, 0x80, 0x0F, 0x9F, 0xF0,
    0x00, 0x07, 0xF0, 0xFC, 0x7E, 0x1F, 0x9F, 0xFF, 0x3F, 0xF0, 0x7F, 0xCF, 0x80, 0x1F, 0x9F, 0xF0,
    0x00, 0x07, 0xF0, 0xFC, 0x7E, 0x1F, 0x9F, 0xFF, 0x3F, 0xF0, 0x7F, 0xCF, 0xC0, 0x3F, 0x3F, 0xF0,
    0x00, 0x07, 0xF8, 0xFC, 0x7E, 0x1F, 0x9F, 0xFF, 0x3F, 0xF0, 0x7F, 0xE7, 0xE0, 0x7F, 0x3F, 0xF0,
    0x00, 0x07, 0xFC, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x3F, 0x80, 0x7F, 0xE7, 0xF9, 0xFE, 0x7F, 0xF0,
    0x00, 0x07, 0xFC, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x3F, 0x80, 0x7F, 0xE3, 0xFF, 0xFE, 0x7F, 0xF0,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x3F, 0x80, 0x7F, 0xC3, 0xFF, 0xFC, 0x1F, 0xE0,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x3F, 0xE0, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xFF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x03, 0xFC, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x07, 0xEF, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x01, 0xFC, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE7, 0xFC, 0x7E, 0x1F, 0x83, 0xF8, 0x01, 0xFC, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE7, 0xFC, 0x7F, 0xFF, 0x83, 0xF8, 0x3F, 0xFC, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE3, 0xFC, 0x7F, 0xFF, 0x83, 0xF8, 0x3F, 0xFC, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE1, 0xFC, 0x7F, 0xFF, 0x03, 0xF8, 0x3F, 0xFC, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE1, 0xFC, 0x3F, 0xFF, 0x03, 0xF8, 0x3F, 0xF8, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE0, 0xFC, 0x1F, 0xFE, 0x03, 0xF8, 0x3F, 0xF0, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
    0x00, 0x07, 0xE0, 0x7C, 0x0F, 0xF8, 0x03, 0xF0, 0x3F, 0xE0, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static unsigned long nextSwapDisplayTime = 0;
static bool showLogo = false;

static void onButtonChange();


void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;

    ButtonState::registerChangeFunc(onButtonChange);
}

void StateMachine::ScreensaverStateHandler::onExit() {
    ButtonState::deregisterChangeFunc(onButtonChange);
}


void StateMachine::ScreensaverStateHandler::onTick() {
    if (millis() >= nextSwapDisplayTime) {
        nextSwapDisplayTime = millis() + 2500;
        showLogo = !showLogo;

        Ui::needUpdate();
    }
}


static void onButtonChange() {
    StateMachine::switchState(StateMachine::lastState);
}


void StateMachine::ScreensaverStateHandler::onInitialDraw() {
    Ui::clear();

    if (showLogo) {
        Ui::display.drawBitmap(
            0,
            0,
            logo,
            SCREEN_WIDTH,
            SCREEN_HEIGHT,
            WHITE
        );
    } else {
        Ui::display.setTextColor(WHITE);

        Ui::display.setTextSize(6);
        Ui::display.setCursor(
            SCREEN_WIDTH / 2 - ((CHAR_WIDTH) * 6) / 2 * 2 - 3,
            2);

        char channelName[3];
        Channels::getName(Receiver::activeChannel, channelName);
        Ui::display.print(channelName);

        Ui::display.setTextSize(2);
        Ui::display.setCursor(
            SCREEN_WIDTH / 2 - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    }

    Ui::needDisplay();
}

void StateMachine::ScreensaverStateHandler::onUpdateDraw() {
    this->onInitialDraw();
}
